name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger the workflow when a tag matching this pattern is pushed

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Cargo Registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo Build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Set Clang as the linker on macOS
        if: matrix.os == 'macos-latest'
        run: |
          export CC=clang
          export CXX=clang++

      - name: Install dependencies
        run: rustup component add clippy

      - name: Lint with Clippy
        run: cargo clippy -- -D warnings

      - name: Run Tests
        run: cargo test --all --release

      - name: Build
        run: cargo build --release

      - name: Install zip on Windows
        if: matrix.os == 'windows-latest'
        run: choco install zip
        shell: powershell

      - name: Generate Checksums and Prepare Artifacts
        run: |
          export OS_NAME=${{ matrix.os }}  # Pass the matrix value to an environment variable
          mkdir -p dist/$OS_NAME
          if [ "$OS_NAME" == "windows-latest" ]; then
            mv target/release/*.exe dist/$OS_NAME/
          else
            mv target/release/* dist/$OS_NAME/
          fi
          cd dist/$OS_NAME/
          for file in *; do
            if [ -f "$file" ]; then
              if [[ "$OSTYPE" == "darwin"* ]]; then
                shasum -a 256 "$file" > "$file".sha256
              else
                sha256sum "$file" > "$file".sha256
              fi
            fi
          done
          
          if [ "$OS_NAME" == "windows-latest" ]; then
            powershell -Command "
              \$files = Get-ChildItem -File | ForEach-Object { \$_.FullName }
              Compress-Archive -Path \$files -DestinationPath '${OS_NAME}-binaries.zip'
            "
          else
            zip -r ${OS_NAME}-binaries.zip .
          fi
        shell: bash

      - name: Upload Binaries and Checksums
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifacts
          path: dist/${{ matrix.os }}/

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Ubuntu Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest-artifacts
          path: dist/ubuntu/

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-latest-artifacts
          path: dist/macos/

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-artifacts
          path: dist/windows/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Ubuntu Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/ubuntu/ubuntu-latest-binaries.zip
          asset_name: ubuntu-binaries.zip
          asset_content_type: application/zip

      - name: Upload macOS Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/macos/macos-latest-binaries.zip
          asset_name: macos-binaries.zip
          asset_content_type: application/zip

      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/windows/windows-latest-binaries.zip
          asset_name: windows-binaries.zip
          asset_content_type: application/zip

      - name: Upload Checksums for Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/windows/django-cli.exe.sha256
          asset_name: windows-checksums
          asset_content_type: text/plain

      - name: Upload Checksums for Ubuntu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/ubuntu/django-cli.sha256
          asset_name: ubuntu-checksums
          asset_content_type: text/plain

      - name: Upload Checksums for macOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/macos/django-cli.sha256
          asset_name: macos-checksums
          asset_content_type: text/plain